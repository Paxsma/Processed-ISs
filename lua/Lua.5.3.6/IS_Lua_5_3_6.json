[{"mnemonic":"move","hint":"Move source register to dest register.","opcode":0,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"loadk","hint":"Load kvalue to destination register.","opcode":1,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"kidx","encoding":"Bx","size":"18Bits","hint":"Kvalue Index","kind":"k_idx"}]},{"mnemonic":"loadkx","hint":"Load kvalue extended.","opcode":2,"operands":[{"operand":"dest","encoding":"Ax","size":"26Bits","hint":"Register","kind":"dest"}]},{"mnemonic":"loadbool","hint":"Load boolean to register and take jump.","opcode":3,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"val","encoding":"B","size":"9Bits","hint":"Value","kind":"val"},{"operand":"jmp","encoding":"C","size":"9Bits","hint":"Jump","kind":"jmp"}]},{"mnemonic":"loadnil","hint":"Iteration start at first target register then increments above the stack and fills with NIL set by source value.","opcode":4,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"val","encoding":"B","size":"9Bits","hint":"Value","kind":"val"}]},{"mnemonic":"getupval","hint":"Load upvalue to destination register.","opcode":5,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"upv","encoding":"B","size":"9Bits","hint":"Upvalue","kind":"upvalue"}]},{"mnemonic":"gettabup","hint":"Gets table upvalue as B and index element as C which gets load to A.","opcode":6,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"upv","encoding":"B","size":"9Bits","hint":"Upvalue","kind":"upvalue"},{"operand":"val","encoding":"C","size":"9Bits","hint":"Value","kind":"val"}]},{"mnemonic":"gettable","hint":"Gets table as B and index element as C which gets load to A.","opcode":7,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"val","encoding":"B","size":"9Bits","hint":"Value","kind":"val"},{"operand":"val","encoding":"C","size":"9Bits","hint":"Value","kind":"val"}]},{"mnemonic":"settabup","hint":"Gets table upvalue as A and index element as B and sets A to the index.","opcode":8,"operands":[{"operand":"upv","encoding":"A","size":"8Bits","hint":"Upvalue","kind":"upvalue"},{"operand":"val","encoding":"B","size":"9Bits","hint":"Value","kind":"val"},{"operand":"val","encoding":"C","size":"9Bits","hint":"Value","kind":"val"}]},{"mnemonic":"setupval","hint":"","opcode":9,"operands":[{"operand":"upv","encoding":"A","size":"8Bits","hint":"Upvalue","kind":"upvalue"},{"operand":"val","encoding":"B","size":"9Bits","hint":"Value","kind":"val"}]},{"mnemonic":"settable","hint":"","opcode":10,"operands":[{"operand":"src","encoding":"A","size":"8Bits","hint":"Register","kind":"reg"},{"operand":"val","encoding":"B","size":"9Bits","hint":"Value","kind":"val"},{"operand":"val","encoding":"C","size":"9Bits","hint":"Value","kind":"val"}]},{"mnemonic":"newtable","hint":"Creates new table with B being array size and C being hash size.","opcode":11,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"tsize","encoding":"B","size":"9Bits","hint":"Table Size","kind":"table_size"},{"operand":"tsize","encoding":"C","size":"9Bits","hint":"Table Size","kind":"table_size"}]},{"mnemonic":"self","hint":"Call to self.","opcode":12,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"val","encoding":"B","size":"9Bits","hint":"Value","kind":"val"},{"operand":"val","encoding":"C","size":"9Bits","hint":"Value","kind":"val"}]},{"mnemonic":"add","hint":"Add B to C and load results to A.","opcode":13,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"sub","hint":"Sub B to C and load results to A.","opcode":14,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"mul","hint":"Multiply B to C and load results to A.","opcode":15,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"mod","hint":"Modulus B to C and load results to A.","opcode":16,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"pow","hint":"Power B to C and load results to A.","opcode":17,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"div","hint":"Divide B to C and load results to A.","opcode":18,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"idiv","hint":"Floor division B to C and load results to A.","opcode":19,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"band","hint":"Bitwise and B to C and load results to A.","opcode":20,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"bor","hint":"Bitwise or B to C and load results to A.","opcode":21,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"bxor","hint":"Bitwise xor division B to C and load results to A.","opcode":22,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"shl","hint":"Shift left B to C and load results to A.","opcode":23,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"shr","hint":"Shift right B to C and load results to A.","opcode":24,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"unm","hint":"Unary minus A to B and load results to A.","opcode":25,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"bnot","hint":"Binary not A to B and load results to A.","opcode":26,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"not","hint":"Unary not A to B and load results to A.","opcode":27,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"len","hint":"Unary length of table B and load results to A.","opcode":28,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"concat","hint":"Concat string where start of stack B to C.","opcode":29,"operands":[{"operand":"dest","encoding":"A","size":"8Bits","hint":"Register","kind":"dest"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"jmp","hint":"Jump to sBx if A is not 0 then all upvalues >= A - 1 will be closed.","opcode":30,"operands":[{"operand":"va;","encoding":"A","size":"8Bits","hint":"Value","kind":"val"},{"operand":"jmp","encoding":"sBx","size":"Signed 18Bits","hint":"Jump","kind":"jmp"}]},{"mnemonic":"eq","hint":"Compare equal B to C and if comparision is not A skip next instruction.","opcode":31,"operands":[{"operand":"va;","encoding":"A","size":"8Bits","hint":"Value","kind":"val"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"lt","hint":"Compare less than B to C and if comparision is not A skip next instruction.","opcode":32,"operands":[{"operand":"va;","encoding":"A","size":"8Bits","hint":"Value","kind":"val"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"le","hint":"Compare less than equal B to C and if comparision is not A skip next instruction.","opcode":33,"operands":[{"operand":"va;","encoding":"A","size":"8Bits","hint":"Value","kind":"val"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"C","size":"9Bits","hint":"Register","kind":"reg"}]},{"mnemonic":"test","hint":"Compare A to C and if false skip next instruction","opcode":34,"operands":[{"operand":"src","encoding":"A","size":"8Bits","hint":"Register","kind":"reg"},{"operand":"val","encoding":"C","size":"9Bits","hint":"Value","kind":"val"}]},{"mnemonic":"testset","hint":"Compare B to C and if false skip next instruction else set A to B.","opcode":35,"operands":[{"operand":"src","encoding":"A","size":"8Bits","hint":"Register","kind":"reg"},{"operand":"src","encoding":"B","size":"9Bits","hint":"Register","kind":"reg"},{"operand":"val","encoding":"C","size":"9Bits","hint":"Value","kind":"val"}]},{"mnemonic":"call","hint":"Call A with B args and C return.","opcode":36,"operands":[{"operand":"src","encoding":"A","size":"8Bits","hint":"Register","kind":"reg"},{"operand":"multret","encoding":"B","size":"9Bits","hint":"Multret Value","kind":"val_multret"},{"operand":"multret","encoding":"C","size":"9Bits","hint":"Multret Value","kind":"val_multret"}]},{"mnemonic":"tailcall","hint":"Return call A with B args and C return.","opcode":37,"operands":[{"operand":"src","encoding":"A","size":"8Bits","hint":"Register","kind":"reg"},{"operand":"multret","encoding":"B","size":"9Bits","hint":"Multret Value","kind":"val_multret"},{"operand":"multret","encoding":"C","size":"9Bits","hint":"Multret Value","kind":"val_multret"}]},{"mnemonic":"return","hint":"Return from start A to A + B - 2.","opcode":38,"operands":[{"operand":"src","encoding":"A","size":"8Bits","hint":"Register","kind":"reg"},{"operand":"multret","encoding":"B","size":"9Bits","hint":"Multret Value","kind":"val_multret"}]},{"mnemonic":"forloop","hint":"For loop follows for format starting A with sBx jump.","opcode":39,"operands":[{"operand":"src","encoding":"A","size":"8Bits","hint":"Register","kind":"reg"},{"operand":"jmp","encoding":"sBx","size":"Signed 18Bits","hint":"Jump","kind":"jmp"}]},{"mnemonic":"forprep","hint":"For loop follows for format starting A with sBx jump.","opcode":40,"operands":[{"operand":"src","encoding":"A","size":"8Bits","hint":"Register","kind":"reg"},{"operand":"jmp","encoding":"sBx","size":"Signed 18Bits","hint":"Jump","kind":"jmp"}]},{"mnemonic":"tforcall","hint":"For prep calls iterator function.","opcode":41,"operands":[{"operand":"src","encoding":"A","size":"8Bits","hint":"Register","kind":"reg"},{"operand":"val","encoding":"C","size":"9Bits","hint":"Value","kind":"val"}]},{"mnemonic":"tforloop","hint":"For loop follows T for format starting A with sBx jump.","opcode":42,"operands":[{"operand":"src","encoding":"A","size":"8Bits","hint":"Register","kind":"reg"},{"operand":"jmp","encoding":"sBx","size":"Signed 18Bits","hint":"Jump","kind":"jmp"}]},{"mnemonic":"setlist","hint":"Sets the values for a range of array elements in a table referenced by A, B is the number of elements to set, C encodes the block number initialized.","opcode":43,"operands":[{"operand":"src","encoding":"A","size":"8Bits","hint":"Register","kind":"reg"},{"operand":"multret","encoding":"B","size":"9Bits","hint":"Multret Value","kind":"val_multret"},{"operand":"multret","encoding":"C","size":"9Bits","hint":"Multret Value","kind":"val_multret"}]},{"mnemonic":"closure","hint":"Set to kvalue proto.","opcode":44,"operands":[{"operand":"src","encoding":"A","size":"8Bits","hint":"Register","kind":"reg"},{"operand":"kidxp","encoding":"Bx","size":"18Bits","hint":"Kvalue Proto Index","kind":"k_idx_p"}]},{"mnemonic":"vararg","hint":"Set range A + 1 to A + B - e1 to vararg.","opcode":45,"operands":[{"operand":"src","encoding":"A","size":"8Bits","hint":"Register","kind":"reg"},{"operand":"multret","encoding":"B","size":"9Bits","hint":"Multret Value","kind":"val_multret"}]},{"mnemonic":"extraarg","hint":"Extra arg Ax for previous opcode.","opcode":46,"operands":[{"operand":"src","encoding":"Ax","size":"26Bits","hint":"Register","kind":"reg"}]}]
